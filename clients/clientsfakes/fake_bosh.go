// This file was generated by counterfeiter
package clientsfakes

import (
	"sync"
	"time"

	"github.com/pivotal-cf/downtimer/clients"
)

type FakeBosh struct {
	GetDeploymentTimesStub        func(taskID string) clients.DeploymentTimes
	getDeploymentTimesMutex       sync.RWMutex
	getDeploymentTimesArgsForCall []struct {
		taskID string
	}
	getDeploymentTimesReturns struct {
		result1 clients.DeploymentTimes
	}
	GetCurrentTaskIdStub        func() (int, error)
	getCurrentTaskIdMutex       sync.RWMutex
	getCurrentTaskIdArgsForCall []struct{}
	getCurrentTaskIdReturns     struct {
		result1 int
		result2 error
	}
	WaitForTaskIdStub        func(timeout time.Duration) int
	waitForTaskIdMutex       sync.RWMutex
	waitForTaskIdArgsForCall []struct {
		timeout time.Duration
	}
	waitForTaskIdReturns struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBosh) GetDeploymentTimes(taskID string) clients.DeploymentTimes {
	fake.getDeploymentTimesMutex.Lock()
	fake.getDeploymentTimesArgsForCall = append(fake.getDeploymentTimesArgsForCall, struct {
		taskID string
	}{taskID})
	fake.recordInvocation("GetDeploymentTimes", []interface{}{taskID})
	fake.getDeploymentTimesMutex.Unlock()
	if fake.GetDeploymentTimesStub != nil {
		return fake.GetDeploymentTimesStub(taskID)
	} else {
		return fake.getDeploymentTimesReturns.result1
	}
}

func (fake *FakeBosh) GetDeploymentTimesCallCount() int {
	fake.getDeploymentTimesMutex.RLock()
	defer fake.getDeploymentTimesMutex.RUnlock()
	return len(fake.getDeploymentTimesArgsForCall)
}

func (fake *FakeBosh) GetDeploymentTimesArgsForCall(i int) string {
	fake.getDeploymentTimesMutex.RLock()
	defer fake.getDeploymentTimesMutex.RUnlock()
	return fake.getDeploymentTimesArgsForCall[i].taskID
}

func (fake *FakeBosh) GetDeploymentTimesReturns(result1 clients.DeploymentTimes) {
	fake.GetDeploymentTimesStub = nil
	fake.getDeploymentTimesReturns = struct {
		result1 clients.DeploymentTimes
	}{result1}
}

func (fake *FakeBosh) GetCurrentTaskId() (int, error) {
	fake.getCurrentTaskIdMutex.Lock()
	fake.getCurrentTaskIdArgsForCall = append(fake.getCurrentTaskIdArgsForCall, struct{}{})
	fake.recordInvocation("GetCurrentTaskId", []interface{}{})
	fake.getCurrentTaskIdMutex.Unlock()
	if fake.GetCurrentTaskIdStub != nil {
		return fake.GetCurrentTaskIdStub()
	} else {
		return fake.getCurrentTaskIdReturns.result1, fake.getCurrentTaskIdReturns.result2
	}
}

func (fake *FakeBosh) GetCurrentTaskIdCallCount() int {
	fake.getCurrentTaskIdMutex.RLock()
	defer fake.getCurrentTaskIdMutex.RUnlock()
	return len(fake.getCurrentTaskIdArgsForCall)
}

func (fake *FakeBosh) GetCurrentTaskIdReturns(result1 int, result2 error) {
	fake.GetCurrentTaskIdStub = nil
	fake.getCurrentTaskIdReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeBosh) WaitForTaskId(timeout time.Duration) int {
	fake.waitForTaskIdMutex.Lock()
	fake.waitForTaskIdArgsForCall = append(fake.waitForTaskIdArgsForCall, struct {
		timeout time.Duration
	}{timeout})
	fake.recordInvocation("WaitForTaskId", []interface{}{timeout})
	fake.waitForTaskIdMutex.Unlock()
	if fake.WaitForTaskIdStub != nil {
		return fake.WaitForTaskIdStub(timeout)
	} else {
		return fake.waitForTaskIdReturns.result1
	}
}

func (fake *FakeBosh) WaitForTaskIdCallCount() int {
	fake.waitForTaskIdMutex.RLock()
	defer fake.waitForTaskIdMutex.RUnlock()
	return len(fake.waitForTaskIdArgsForCall)
}

func (fake *FakeBosh) WaitForTaskIdArgsForCall(i int) time.Duration {
	fake.waitForTaskIdMutex.RLock()
	defer fake.waitForTaskIdMutex.RUnlock()
	return fake.waitForTaskIdArgsForCall[i].timeout
}

func (fake *FakeBosh) WaitForTaskIdReturns(result1 int) {
	fake.WaitForTaskIdStub = nil
	fake.waitForTaskIdReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeBosh) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDeploymentTimesMutex.RLock()
	defer fake.getDeploymentTimesMutex.RUnlock()
	fake.getCurrentTaskIdMutex.RLock()
	defer fake.getCurrentTaskIdMutex.RUnlock()
	fake.waitForTaskIdMutex.RLock()
	defer fake.waitForTaskIdMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBosh) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clients.Bosh = new(FakeBosh)
